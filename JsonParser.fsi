// Signature file for parser generated by fsyacc
module MiniJson.Internal.Parser
type token = 
  | TRUE_V
  | FALSE_V
  | NULL_V
  | V_SEP
  | KV_SEP
  | O_BEGIN
  | O_END
  | A_BEGIN
  | A_END
  | EOF
  | STRING_V of (string)
  | LEX_ERROR of (string)
  | NUMBER_V of (float)
type tokenId = 
    | TOKEN_TRUE_V
    | TOKEN_FALSE_V
    | TOKEN_NULL_V
    | TOKEN_V_SEP
    | TOKEN_KV_SEP
    | TOKEN_O_BEGIN
    | TOKEN_O_END
    | TOKEN_A_BEGIN
    | TOKEN_A_END
    | TOKEN_EOF
    | TOKEN_STRING_V
    | TOKEN_LEX_ERROR
    | TOKEN_NUMBER_V
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Recover
    | NONTERM_Full
    | NONTERM_Value
    | NONTERM_Object
    | NONTERM_Members
    | NONTERM_Member
    | NONTERM_Array
    | NONTERM_Values
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Json ) 
