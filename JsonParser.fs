// Implementation file for parser generated by fsyacc
module MiniJson.Internal.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "JsonParser.fsy"

open MiniJson.JsonModule

let fail (parseState : Microsoft.FSharp.Text.Parsing.IParseState) (description : string) =
  let b,e = parseState.ResultRange
  failwithf "(%d,%d) - %A" b.Line b.Column description

# 14 "JsonParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TRUE_V
  | FALSE_V
  | NULL_V
  | V_SEP
  | KV_SEP
  | O_BEGIN
  | O_END
  | A_BEGIN
  | A_END
  | EOF
  | STRING_V of (string)
  | LEX_ERROR of (string)
  | NUMBER_V of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TRUE_V
    | TOKEN_FALSE_V
    | TOKEN_NULL_V
    | TOKEN_V_SEP
    | TOKEN_KV_SEP
    | TOKEN_O_BEGIN
    | TOKEN_O_END
    | TOKEN_A_BEGIN
    | TOKEN_A_END
    | TOKEN_EOF
    | TOKEN_STRING_V
    | TOKEN_LEX_ERROR
    | TOKEN_NUMBER_V
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Recover
    | NONTERM_Full
    | NONTERM_Value
    | NONTERM_Object
    | NONTERM_Members
    | NONTERM_Member
    | NONTERM_Array
    | NONTERM_Values

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TRUE_V  -> 0 
  | FALSE_V  -> 1 
  | NULL_V  -> 2 
  | V_SEP  -> 3 
  | KV_SEP  -> 4 
  | O_BEGIN  -> 5 
  | O_END  -> 6 
  | A_BEGIN  -> 7 
  | A_END  -> 8 
  | EOF  -> 9 
  | STRING_V _ -> 10 
  | LEX_ERROR _ -> 11 
  | NUMBER_V _ -> 12 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TRUE_V 
  | 1 -> TOKEN_FALSE_V 
  | 2 -> TOKEN_NULL_V 
  | 3 -> TOKEN_V_SEP 
  | 4 -> TOKEN_KV_SEP 
  | 5 -> TOKEN_O_BEGIN 
  | 6 -> TOKEN_O_END 
  | 7 -> TOKEN_A_BEGIN 
  | 8 -> TOKEN_A_END 
  | 9 -> TOKEN_EOF 
  | 10 -> TOKEN_STRING_V 
  | 11 -> TOKEN_LEX_ERROR 
  | 12 -> TOKEN_NUMBER_V 
  | 15 -> TOKEN_end_of_input
  | 13 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Recover 
    | 3 -> NONTERM_Recover 
    | 4 -> NONTERM_Full 
    | 5 -> NONTERM_Full 
    | 6 -> NONTERM_Value 
    | 7 -> NONTERM_Value 
    | 8 -> NONTERM_Value 
    | 9 -> NONTERM_Value 
    | 10 -> NONTERM_Value 
    | 11 -> NONTERM_Value 
    | 12 -> NONTERM_Value 
    | 13 -> NONTERM_Value 
    | 14 -> NONTERM_Object 
    | 15 -> NONTERM_Object 
    | 16 -> NONTERM_Object 
    | 17 -> NONTERM_Members 
    | 18 -> NONTERM_Members 
    | 19 -> NONTERM_Members 
    | 20 -> NONTERM_Member 
    | 21 -> NONTERM_Member 
    | 22 -> NONTERM_Array 
    | 23 -> NONTERM_Array 
    | 24 -> NONTERM_Array 
    | 25 -> NONTERM_Values 
    | 26 -> NONTERM_Values 
    | 27 -> NONTERM_Values 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 15 
let _fsyacc_tagOfErrorTerminal = 13

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TRUE_V  -> "TRUE_V" 
  | FALSE_V  -> "FALSE_V" 
  | NULL_V  -> "NULL_V" 
  | V_SEP  -> "V_SEP" 
  | KV_SEP  -> "KV_SEP" 
  | O_BEGIN  -> "O_BEGIN" 
  | O_END  -> "O_END" 
  | A_BEGIN  -> "A_BEGIN" 
  | A_END  -> "A_END" 
  | EOF  -> "EOF" 
  | STRING_V _ -> "STRING_V" 
  | LEX_ERROR _ -> "LEX_ERROR" 
  | NUMBER_V _ -> "NUMBER_V" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TRUE_V  -> (null : System.Object) 
  | FALSE_V  -> (null : System.Object) 
  | NULL_V  -> (null : System.Object) 
  | V_SEP  -> (null : System.Object) 
  | KV_SEP  -> (null : System.Object) 
  | O_BEGIN  -> (null : System.Object) 
  | O_END  -> (null : System.Object) 
  | A_BEGIN  -> (null : System.Object) 
  | A_END  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING_V _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEX_ERROR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER_V _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 6us; 65535us; 0us; 7us; 17us; 24us; 22us; 24us; 26us; 15us; 28us; 16us; 33us; 16us; 1us; 65535us; 0us; 2us; 4us; 65535us; 0us; 5us; 26us; 27us; 28us; 32us; 33us; 32us; 4us; 65535us; 0us; 13us; 26us; 13us; 28us; 13us; 33us; 13us; 2us; 65535us; 17us; 19us; 22us; 23us; 2us; 65535us; 17us; 21us; 22us; 21us; 4us; 65535us; 0us; 14us; 26us; 14us; 28us; 14us; 33us; 14us; 2us; 65535us; 28us; 30us; 33us; 34us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 10us; 12us; 17us; 22us; 25us; 28us; 33us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 4us; 5us; 13us; 16us; 24us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 3us; 13us; 16us; 24us; 4us; 13us; 16us; 24us; 27us; 2us; 14us; 15us; 1us; 14us; 1us; 15us; 1us; 15us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 2us; 19us; 21us; 1us; 20us; 1us; 20us; 1us; 20us; 2us; 22us; 23us; 1us; 22us; 1us; 23us; 1us; 23us; 2us; 25us; 26us; 1us; 25us; 1us; 25us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 37us; 42us; 45us; 47us; 49us; 51us; 54us; 56us; 58us; 61us; 63us; 65us; 67us; 70us; 72us; 74us; 76us; 79us; 81us; |]
let _fsyacc_action_rows = 35
let _fsyacc_actionTableElements = [|9us; 32768us; 0us; 8us; 1us; 9us; 2us; 10us; 5us; 17us; 7us; 28us; 10us; 12us; 11us; 3us; 12us; 11us; 13us; 4us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 9us; 6us; 0us; 16388us; 1us; 16389us; 9us; 16397us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16397us; 4us; 32768us; 6us; 18us; 10us; 25us; 11us; 3us; 13us; 4us; 0us; 16398us; 1us; 32768us; 6us; 20us; 0us; 16399us; 1us; 16402us; 3us; 22us; 3us; 32768us; 10us; 25us; 11us; 3us; 13us; 4us; 0us; 16401us; 1us; 16403us; 3us; 16405us; 1us; 32768us; 4us; 26us; 9us; 32768us; 0us; 8us; 1us; 9us; 2us; 10us; 5us; 17us; 7us; 28us; 10us; 12us; 11us; 3us; 12us; 11us; 13us; 4us; 0us; 16404us; 10us; 32768us; 0us; 8us; 1us; 9us; 2us; 10us; 5us; 17us; 7us; 28us; 8us; 29us; 10us; 12us; 11us; 3us; 12us; 11us; 13us; 4us; 0us; 16406us; 1us; 32768us; 8us; 31us; 0us; 16407us; 1us; 16410us; 3us; 33us; 9us; 32768us; 0us; 8us; 1us; 9us; 2us; 10us; 5us; 17us; 7us; 28us; 10us; 12us; 11us; 3us; 12us; 11us; 13us; 4us; 0us; 16409us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 10us; 11us; 12us; 13us; 14us; 16us; 17us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 33us; 34us; 36us; 37us; 39us; 43us; 44us; 46us; 48us; 58us; 59us; 70us; 71us; 73us; 74us; 76us; 86us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 3us; 1us; 1us; 3us; 1us; 2us; 3us; 1us; 3us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 65535us; 16388us; 65535us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 16398us; 65535us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16404us; 65535us; 16406us; 65535us; 16407us; 65535us; 65535us; 16409us; |]
let _fsyacc_reductions ()  =    [| 
# 177 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Json )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 186 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Full)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "JsonParser.fsy"
                                   _1 
                   )
# 19 "JsonParser.fsy"
                 :  Json ));
# 197 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "JsonParser.fsy"
                                                 fail parseState _1        
                   )
# 22 "JsonParser.fsy"
                 : 'Recover));
# 208 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "JsonParser.fsy"
                                                                           
                   )
# 23 "JsonParser.fsy"
                 : 'Recover));
# 218 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "JsonParser.fsy"
                                                 _1                        
                   )
# 26 "JsonParser.fsy"
                 : 'Full));
# 229 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "JsonParser.fsy"
                                                 fail parseState "EOF"     
                   )
# 27 "JsonParser.fsy"
                 : 'Full));
# 240 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "JsonParser.fsy"
                                                 JsonBoolean true          
                   )
# 30 "JsonParser.fsy"
                 : 'Value));
# 250 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "JsonParser.fsy"
                                                 JsonBoolean false         
                   )
# 31 "JsonParser.fsy"
                 : 'Value));
# 260 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "JsonParser.fsy"
                                                 JsonNull                  
                   )
# 32 "JsonParser.fsy"
                 : 'Value));
# 270 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "JsonParser.fsy"
                                                 JsonNumber (_1)           
                   )
# 33 "JsonParser.fsy"
                 : 'Value));
# 281 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "JsonParser.fsy"
                                                 JsonString (_1)           
                   )
# 34 "JsonParser.fsy"
                 : 'Value));
# 292 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Object)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "JsonParser.fsy"
                                                 _1                        
                   )
# 35 "JsonParser.fsy"
                 : 'Value));
# 303 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Array)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "JsonParser.fsy"
                                                 _1                        
                   )
# 36 "JsonParser.fsy"
                 : 'Value));
# 314 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "JsonParser.fsy"
                                                 fail parseState "VALUE"   
                   )
# 37 "JsonParser.fsy"
                 : 'Value));
# 325 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "JsonParser.fsy"
                                                 JsonObject []             
                   )
# 40 "JsonParser.fsy"
                 : 'Object));
# 335 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Members)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "JsonParser.fsy"
                                                 JsonObject _2             
                   )
# 41 "JsonParser.fsy"
                 : 'Object));
# 346 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "JsonParser.fsy"
                                                 fail parseState "OBJECT"  
                   )
# 42 "JsonParser.fsy"
                 : 'Object));
# 357 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Member)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Members)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "JsonParser.fsy"
                                                 _1::_3                    
                   )
# 45 "JsonParser.fsy"
                 : 'Members));
# 369 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Member)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "JsonParser.fsy"
                                                 [_1]                      
                   )
# 46 "JsonParser.fsy"
                 : 'Members));
# 380 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "JsonParser.fsy"
                                                 fail parseState "MEMBERS" 
                   )
# 47 "JsonParser.fsy"
                 : 'Members));
# 391 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "JsonParser.fsy"
                                                 _1,_3                     
                   )
# 50 "JsonParser.fsy"
                 : 'Member));
# 403 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "JsonParser.fsy"
                                                 fail parseState "MEMBER"  
                   )
# 51 "JsonParser.fsy"
                 : 'Member));
# 414 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "JsonParser.fsy"
                                                 JsonArray []              
                   )
# 54 "JsonParser.fsy"
                 : 'Array));
# 424 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Values)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "JsonParser.fsy"
                                                 JsonArray _2              
                   )
# 55 "JsonParser.fsy"
                 : 'Array));
# 435 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "JsonParser.fsy"
                                                 fail parseState "ARRAY"   
                   )
# 56 "JsonParser.fsy"
                 : 'Array));
# 446 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Values)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "JsonParser.fsy"
                                                 _1::_3                    
                   )
# 59 "JsonParser.fsy"
                 : 'Values));
# 458 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "JsonParser.fsy"
                                                 [_1]                      
                   )
# 60 "JsonParser.fsy"
                 : 'Values));
# 469 "JsonParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "JsonParser.fsy"
                                                 fail parseState "VALUES"  
                   )
# 61 "JsonParser.fsy"
                 : 'Values));
|]
# 481 "JsonParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 16;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Json  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
